import numpy as np
import matplotlib.pyplot as plt
from matplotlib.widgets import Slider
from mpl_toolkits.mplot3d import Axes3D
from time import time
import pandas as pd
import random

from functions import *
from mc_functions import *

#Variables
dim = 2                 #Dimension of data
size = math.floor(5000*0.2)               #Original size of Delaunay triangulation
test_size = 500          #Size of subdata to test
al = 0.035                #Factor of distance gradient
errw = 0.5                #Weight of error gradient. Distance gradient's weight is 1-errw
avw = 5
it = 100                #Number of iterations
rep = 0                 #NÂº of times to refine convex hull
bc_time = np.inf            #Times at which we add barycenters
mte_threshold = 0.2     #Threshold of mean training error of triangles at which we add the barycenters
ref_label = None        #Label with respect to which binarize 
node = 41
random.seed(0)

x = -2+4*np.array([np.random.normal() for _ in range(5000)])
y = -2+4*np.array([np.random.normal() for _ in range(5000)])
data = np.array([[x[i],y[i]] for i in range(5000)])
data = np.array([x for x in data if ((x[0]+2)**2 + (x[1]-3)**2>3)])
data = np.array([x for x in data if ((x[0]+4)**2 + (x[1]+4)**2>4)])
labels = np.array([int((x[0]**2 + x[1]**2)**2 - 2*49*(x[0]**2 - x[1]**2) > 0) for x in data])
data += 0.3*np.array([np.random.normal(size=[1,2])[0] for _ in range(len(data))])
colors = []
for x in labels:
    if x==0:
        colors.append('b')
    else:
        colors.append('r')
data, labels, test_data, test_labels = sample_to_test(data,labels,test_size)
data, labels, sample, rem, out_hull = initialize_sample(data,labels,size,dim,rep)
labels, dim_labels = reshape_labels(data,labels)
#data[sample[out_hull]] += al*(errw*(data[errin]-data[sample[out_hull]])+(1-errw)*(data[disin]-data[sample[out_hull]]))
tri, _, e, labels[sample,:], err = mc_delaunayization2(data,sample,labels,dim,dim_labels,avw)

#ax1.triplot(data[sample][:,0],data[sample][:,1],tri.simplices,color = "black")
colors_rem = []
for i in range(len(rem)):
    if sum(labels[rem[i],:])==0:
        colors_rem.append('b')
    else:
        colors_rem.append('r')
colors_sample = [[min(1,labels[sample][i,0]),0,1-min(labels[sample][i,0],1)] for i in range(len(sample))]
colors_sample = [[max(c[0],0),0,max(c[2],0)] for c in colors_sample]
#ax1.scatter(data[sample][:,0],data[sample][:,1],s=100,color = colors_sample,marker='x')
long_data = []
long_labels = []
long_colors = []
long_tris = []
long_dxe = []
long_dye = []
long_dxd = []
long_dyd = []
long_errs = []
long_errin = []
long_disin = []
avs, sigmas, maxs, evars, rerrs = [], [], [], [], []
for i in range(it):
    tri, _, e, labels[sample,:], err = mc_delaunayization2(data,sample,labels,dim,dim_labels,avw)
    avs.append(sum(e)/len(data))
    sigmas.append(np.sqrt(sum(e*e)/len(e) - avs[i]*avs[i]))
    maxs.append(max(e))
    evars.append(compute_edges_variance(data,dim,sample,tri))
    rerrs.append(mc_compute_real_error(test_data, dim, tri, labels[sample], test_labels))
    colors_sample = [[min(1,labels[sample][i,0]),0,1-min(labels[sample][i,0],1)] for i in range(len(sample))]
    colors_sample = [[max(c[0],0),0,max(c[2],0)] for c in colors_sample]
    print(i)
    L = len(out_hull)
    adj = adjacency(tri,out_hull)
    disin = np.zeros(L)
    errin = np.zeros(L)
    for i in range(L):
        try:
            errin[i] = sample[adj[out_hull[i]][np.argmax([(err[j]-err[out_hull[i]]) for j in adj[out_hull[i]]])]]
            disin[i] = sample[adj[out_hull[i]][np.argmax([sum((data[sample[j]]-data[sample[out_hull[i]]])**2) for j in adj[out_hull[i]]])]]
        except Exception as e:
            print("Exception at node ",sample[out_hull[i]],": ",adj[out_hull[i]])
            print("Exception: ",e)
    errin = [int(i) for i in errin]
    disin = [int(i) for i in disin]
    long_errin.append(list(sample).index(errin[out_hull.index(node)]))
    long_disin.append(list(sample).index(disin[out_hull.index(node)]))
    dx_e = (data[errin]-data[sample[out_hull]])[:,0]*al*errw
    dy_e = (data[errin]-data[sample[out_hull]])[:,1]*al*errw
    dx_d = (data[disin]-data[sample[out_hull]])[:,0]*al*(1-errw)
    dy_d = (data[disin]-data[sample[out_hull]])[:,1]*al*(1-errw)
    long_dxe.append(dx_e)
    long_dye.append(dy_e)
    long_dxd.append(dx_d)
    long_dyd.append(dy_d)
    long_data.append(data[sample])
    long_labels.append(labels[sample,:])
    data[sample[out_hull]] += al*(errw*(data[errin]-data[sample[out_hull]])+(1-errw)*(data[disin]-data[sample[out_hull]]))
    long_colors.append(colors_sample)
    long_tris.append(tri)
    long_errs.append(err)


fig1 =  plt.figure(figsize = (10,7))
fig1.suptitle('Weight = '+str(errw))
ax10 = fig1.add_subplot(121)
ax11 = fig1.add_subplot(122)
ax10.scatter(long_data[0][:,0],long_data[0][:,1],color=long_colors[0])
ax10.scatter(data[rem][:,0],data[rem][:,1],s=2,color=colors_rem, alpha=0.2)
axcolor = "White"
time_axis = plt.axes([0.20, 0.05, 0.65, 0.03], 
                          facecolor = axcolor)
time_slider1 = Slider(time_axis,'Time',0,it,valinit=0)
def update1(val):
    ax10.clear()
    ax11.clear()
    ax10.set_title('xy')
    ax11.set_title('Training error')
    """ lx = abs(long_data[int(val)][node,0]-long_data[int(val)][long_disin[int(val)],0])*(-1.5)
    ly = abs(long_data[int(val)][node,1]-long_data[int(val)][long_disin[int(val)],1])*(-1.5)
    ax10.set_xlim(long_data[int(val)][node,0]-lx,long_data[int(val)][node,0]+lx)
    ax10.set_ylim(long_data[int(val)][node,1]-ly,long_data[int(val)][node,1]+ly) """
    ax10.scatter(long_data[int(val)][:,0],long_data[int(val)][:,1],color=long_colors[int(val)],alpha=0.2)
    ax10.scatter(data[rem][:,0],data[rem][:,1],s=2,color=colors_rem, alpha=0.2)
    
    ax10.quiver(long_data[int(val)][node,0],long_data[int(val)][node,1],long_dxe[int(val)][out_hull.index(node)],long_dye[int(val)][out_hull.index(node)],color='orange')
    ax10.quiver(long_data[int(val)][node,0],long_data[int(val)][node,1],long_dxd[int(val)][out_hull.index(node)],long_dyd[int(val)][out_hull.index(node)],color='purple')
    ax10.quiver(long_data[int(val)][node,0],long_data[int(val)][node,1],long_dxe[int(val)][out_hull.index(node)]+long_dxd[int(val)][out_hull.index(node)],long_dye[int(val)][out_hull.index(node)]+long_dyd[int(val)][out_hull.index(node)],color='black')
    text = '('+str(round(long_data[int(val)][node,0]+long_dxe[int(val)][out_hull.index(node)]+long_dxd[int(val)][out_hull.index(node)],2))+','+str(round(long_data[int(val)][node,1]+long_dye[int(val)][out_hull.index(node)]+long_dyd[int(val)][out_hull.index(node)],2)) +')'
    ax10.text(long_data[int(val)][node,0]+long_dxe[int(val)][out_hull.index(node)]+long_dxd[int(val)][out_hull.index(node)],long_data[int(val)][node,1]+long_dye[int(val)][out_hull.index(node)]+long_dyd[int(val)][out_hull.index(node)],text)
    
    ax10.scatter(long_data[int(val)][node,0],long_data[int(val)][node,1],color=long_colors[int(val)][node],s=100)#[long_colors[int(val)][j] for j in out_hull],marker='x')
    ax10.scatter(long_data[int(val)+1][node,0],long_data[int(val)+1][node,1],color=long_colors[int(val)+1][node],s=100,marker='*')
    ax10.scatter(long_data[int(val)][node,0]+long_dxe[int(val)][out_hull.index(node)]+long_dxd[int(val)][out_hull.index(node)],long_data[int(val)][node,1]+long_dye[int(val)][out_hull.index(node)]+long_dyd[int(val)][out_hull.index(node)],color=long_colors[int(val)][node],s=100,marker='x')#[long_colors[int(val)][j] for j in out_hull],marker='x')
    ax10.scatter([long_data[int(val)][long_errin[int(val)],0]],[long_data[int(val)][long_errin[int(val)],1]],color='orange',marker='s',s=100,zorder=0)
    ax10.scatter([long_data[int(val)][long_disin[int(val)],0]],[long_data[int(val)][long_disin[int(val)],1]],color='purple',marker='s',s=100,zorder=0)
    
    
    tri = long_tris[int(val)]
    ax10.triplot(long_data[int(val)][:,0],long_data[int(val)][:,1],tri.simplices,color = "black",alpha=0.2,linewidth=0.5)
    for triangle in range(len(tri.simplices)):
        tr = tri.simplices[triangle]
        if node in tr:
            for i in tr:
                if i==node:
                    text = str(round(long_errs[int(val)][i],2))+',('+str(round(long_data[int(val)][i][0],2))+','+str(round(long_data[int(val)][i][1],2))+')'
                    ax10.text(long_data[int(val)][i][0],long_data[int(val)][i][1],text)
                    
                else:
                    text = '('+str(round(long_errs[int(val)][i],2))+')'
                    ax10.text(long_data[int(val)][i][0],long_data[int(val)][i][1],text)
                    
    
    ax11.plot(range(int(val)+1),avs[:int(val)+1],'--+')
time_slider1.on_changed(update1)


fig2 =  plt.figure(figsize = (10,7))
fig2.suptitle('Error weight = '+str(errw)+'; average weight = '+str(avw))
ax20 = fig2.add_subplot(121)
ax21 = fig2.add_subplot(122)
ax20.scatter(long_data[0][:,0],long_data[0][:,1],color=long_colors[0])
ax20.scatter(data[rem][:,0],data[rem][:,1],s=2,color=colors_rem, alpha=0.2)
axcolor = "White"
time_axis = plt.axes([0.20, 0.05, 0.65, 0.03], 
                          facecolor = axcolor)
time_slider2 = Slider(time_axis,'Time',0,it,valinit=0)
def update2(val):
    ax20.clear()
    ax21.clear()
    ax20.set_title('xy')
    ax21.set_title('Training error')
    ax20.scatter(long_data[int(val)][:,0],long_data[int(val)][:,1],color=long_colors[int(val)],s=10,alpha=1)
    ax20.scatter(data[rem][:,0],data[rem][:,1],s=2,color=colors_rem, alpha=0.2)
    """ for i in range(len(long_data[int(val)])):
        if round(long_labels[int(val)][i,0],3)!=0.0 and round(long_labels[int(val)][i,0],3)!=1.0:
            text = str(round(long_labels[int(val)][i,0],3))
            ax20.text(long_data[int(val)][i,0],long_data[int(val)][i,1],text) """
    tri = long_tris[int(val)]
    ax20.triplot(long_data[int(val)][:,0],long_data[int(val)][:,1],tri.simplices,color = "black",alpha=0.2,linewidth=0.5)
    ax21.plot(range(int(val)+1),avs[:int(val)+1],'--+')
    ax21.plot(range(int(val)+1),rerrs[:int(val)+1],'--+')
time_slider2.on_changed(update2)
plt.show()