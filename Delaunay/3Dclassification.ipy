# -*- coding: utf-8 -*-
"""
Created on Sat Dec 30 15:12:37 2023

@author: arnau
"""
import numpy as np
import matplotlib.pyplot as plt
from time import time
#from mayavi import mlab

from sklearn.datasets import make_classification

from functions import *

#Variables
dim = 3
n_samples = 10000
noise = 0.1
size = 100
test_size = 1000
al = 0.1
errw = 0.5
it = 20
rep = 0
lb = 0
ub = 1
binary=False
threshold=0.5
filename = '_3Dclass'


data, labels = make_classification(n_samples=n_samples,n_features=3, n_redundant=0, n_informative=2, n_clusters_per_class=1,n_classes=2)
data = np.array(data, dtype=float)
labels = np.array(labels, dtype=float)
data, labels, test_data, test_labels = sample_to_test(data,labels,test_size)
data, labels, sample, rem, out_hull = initialize_sample(data,labels,size,dim,rep)

colors_rem = []
colors_sample = []
for i in range(len(rem)):
    if labels[rem[i]] >= threshold:
        colors_rem.append('r')
    else:
        colors_rem.append('b')
for i in range(len(sample)):
    if labels[sample[i]] >= threshold:
        colors_sample.append('r')
    else:
        colors_sample.append('b')

fig0 =  plt.figure(figsize = (10,7))
ax0 = fig0.add_subplot(111, projection='3d')
ax0.scatter3D(data[rem][:,0],data[rem][:,1],data[rem][:,2],s=2,color=colors_rem)
ax0.scatter3D(data[sample][:,0],data[sample][:,1],data[sample][:,2],s=100,color = colors_sample)
ax0.set_title('Original data')

tri, e, err, labels[sample] = delaunayization(data,sample,labels,dim,lb,ub,binary,threshold)

colors_rem = []
colors_sample = []
for i in range(len(rem)):
    if labels[rem[i]] >= threshold:
        colors_rem.append('r')
    else:
        colors_rem.append('b')
for i in range(len(sample)):
    if labels[sample[i]] >= threshold:
        colors_sample.append('r')
    else:
        colors_sample.append('b')

fig1 =  plt.figure(figsize = (10,7))
ax1 = fig1.add_subplot(111, projection='3d')
ax1.scatter3D(data[rem][:,0],data[rem][:,1],data[rem][:,2],s=2,color=colors_rem)
ax1.scatter3D(data[sample][:,0],data[sample][:,1],data[sample][:,2],s=100,color = colors_sample)
#ax1.plot_trisurf(data[sample][:,0],data[sample][:,1],data[sample][:,2], triangles=tri.simplices, alpha=0.5)
for i in range(len(sample)):
    ax1.text(data[sample[i]][0],data[sample[i]][1],data[sample[i]][2],str(round(labels[sample[i]],2)))
for tr in tri.simplices:
        pts = data[sample[tr], :]
        ax1.plot3D(pts[[0,1],0], pts[[0,1],1], pts[[0,1],2], color='black', lw='0.1')
        ax1.plot3D(pts[[0,2],0], pts[[0,2],1], pts[[0,2],2], color='black', lw='0.1')
        ax1.plot3D(pts[[0,3],0], pts[[0,3],1], pts[[0,3],2], color='black', lw='0.1')
        ax1.plot3D(pts[[1,2],0], pts[[1,2],1], pts[[1,2],2], color='black', lw='0.1')
        ax1.plot3D(pts[[1,3],0], pts[[1,3],1], pts[[1,3],2], color='black', lw='0.1')
        ax1.plot3D(pts[[2,3],0], pts[[2,3],1], pts[[2,3],2], color='black', lw='0.1')
ax1.set_title('First estimation')

start = time()
tri, e, err, labels[sample] =  movepoints(data,labels,sample,out_hull,dim,it,al,errw,lb,ub,binary,threshold,filename)
end = time()
print("Total time: ",end-start)

"""ax1.triplot(data[sample][:,0],data[sample][:,1],tri.simplices,color = "blue")
ax1.scatter(data[sample][:,0],data[sample][:,1],s=[100*i for i in err],color = "blue")
ax1.scatter(data[rem][:,0],data[rem][:,1],s=2,alpha=0.1,color='black')
plt.show()"""

colors = []
for i in range(len(sample)):
    if labels[sample[i]] >= threshold:
        colors.append('r')
    else:
        colors.append('b')
fig2 =  plt.figure(figsize = (10,7))
ax2 = fig2.add_subplot(111, projection='3d')
ax2.scatter3D(data[rem][:,0],data[rem][:,1],data[rem][:,2],s=2,color=colors_rem)
ax2.scatter3D(data[sample][:,0],data[sample][:,1],data[sample][:,2],s=100,color = colors)
#ax2.plot_trisurf(data[sample][:,0],data[sample][:,1],data[sample][:,2], triangles=tri.simplices, alpha=0.5)
for i in range(len(sample)):
    ax2.text(data[sample[i]][0],data[sample[i]][1],data[sample[i]][2],str(round(labels[sample[i]],2)))
tri_colors = ['b','r','g']
for triangle in range(len(tri.simplices)):
        tr = tri.simplices[triangle]
        ll = [labels[rem[i]] for i in range(len(rem)) if tri.find_simplex(data[rem[i]])==triangle]
        if len(ll)!=0:
            color = tri_colors[math.floor(sum(ll)/len(ll))]
            lw = '1'
        else:
            color = 'black'
            lw = '0.5'
        pts = data[sample[tr], :]
        ax2.plot3D(pts[[0,1],0], pts[[0,1],1], pts[[0,1],2], color=color, lw=lw, alpha = 0.1)
        ax2.plot3D(pts[[0,2],0], pts[[0,2],1], pts[[0,2],2], color=color, lw=lw, alpha = 0.1)
        ax2.plot3D(pts[[0,3],0], pts[[0,3],1], pts[[0,3],2], color=color, lw=lw, alpha = 0.1)
        ax2.plot3D(pts[[1,2],0], pts[[1,2],1], pts[[1,2],2], color=color, lw=lw, alpha = 0.1)
        ax2.plot3D(pts[[1,3],0], pts[[1,3],1], pts[[1,3],2], color=color, lw=lw, alpha = 0.1)
        ax2.plot3D(pts[[2,3],0], pts[[2,3],1], pts[[2,3],2], color=color, lw=lw, alpha = 0.1)
ax2.set_title('After moving points')

start = time()
targets, errors, correct, incorrect = classify(test_data, dim, tri, labels[sample], threshold=threshold, real=test_labels)
end = time()
print("Time to estimate labels: ",end-start)

print(sum(errors)/test_size)
test_colors = []
for i in range(len(test_labels)):
    if test_labels[i] >= threshold:
        test_colors.append('r')
    else:
        test_colors.append('b')

fig3 =  plt.figure(figsize = (10,7))
ax3 = fig3.add_subplot(111, projection='3d')
ax3.scatter3D(data[sample][:,0],data[sample][:,1],data[sample][:,2],s=10,color = colors,marker='^')
ax3.scatter3D(test_data[correct][:,0],test_data[correct][:,1],test_data[correct][:,2],s=10,color = [test_colors[i] for i in correct],marker='o')
ax3.scatter3D(test_data[incorrect][:,0],test_data[incorrect][:,1],test_data[incorrect][:,2],s=100,color = [test_colors[i] for i in incorrect],marker='x')
tri_colors = ['b','r']
for triangle in range(len(tri.simplices)):
        tr = tri.simplices[triangle]
        ll = [labels[rem[i]] for i in range(len(rem)) if tri.find_simplex(data[rem[i]])==triangle]
        if len(ll)!=0:
            color = tri_colors[math.floor(sum(ll)/len(ll))]
            lw = '1'
        else:
            color = 'black'
            lw = '0.5'
        pts = data[sample[tr], :]
        ax3.plot3D(pts[[0,1],0], pts[[0,1],1], pts[[0,1],2], color=color, lw=lw, alpha = 0.1)
        ax3.plot3D(pts[[0,2],0], pts[[0,2],1], pts[[0,2],2], color=color, lw=lw, alpha = 0.1)
        ax3.plot3D(pts[[0,3],0], pts[[0,3],1], pts[[0,3],2], color=color, lw=lw, alpha = 0.1)
        ax3.plot3D(pts[[1,2],0], pts[[1,2],1], pts[[1,2],2], color=color, lw=lw, alpha = 0.1)
        ax3.plot3D(pts[[1,3],0], pts[[1,3],1], pts[[1,3],2], color=color, lw=lw, alpha = 0.1)
        ax3.plot3D(pts[[2,3],0], pts[[2,3],1], pts[[2,3],2], color=color, lw=lw, alpha = 0.1)
ax3.set_title('Labels estimation')
fig3.savefig('media/plot'+filename+'.png')
plt.show()