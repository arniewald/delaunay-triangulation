# -*- coding: utf-8 -*-
"""
Applies the algorithm to Iris dataset from sklearn binarized.
"""

import numpy as np
import matplotlib.pyplot as plt
from time import time

from sklearn.datasets import load_iris

from functions import *

#Variables
dim = 4                 #Dimension of data
size = 75               #Original size of Delaunay triangulation
test_size = 20          #Size of subdata to test
al = 0.1                #Factor of distance gradient
errw = 0                #Weight of error gradient. Distance gradient's weight is 1-errw
it = 100                #Number of iterations
rep = 0                 #NÂº of times to refine convex hull
lb = 0                  #Lower bound of labels
ub = 1                  #Upper bound of labels
threshold = 0.5         #Threshold at which we map the label to 1
bc_time = np.inf        #Times at which we add barycenters
mte_threshold = 0.05    #Threshold of mean training error of triangles at which we add the barycenters
ref_label = 1           #Label with respect to which binarize
#Name of file in which to write results
filename = 'Iris4D_binary' + str(ref_label) + '_bctime' + str(bc_time) + '_th' + str(mte_threshold)           
random.seed(0)


#Dataset extraction, test sampling and data initialization
iris = load_iris()
data = iris['data']
labels = np.array(iris['target'], dtype=float)

#Binarization
ref_label = 0
for i in range(len(labels)):
    if labels[i] == ref_label:
        labels[i] = 1
    else:
        labels[i] = 0


data, labels, test_data, test_labels = sample_to_test(data,labels,test_size)
data, labels, sample, rem, out_hull = initialize_sample(data,labels,size,dim,rep)


#Initial plot
colors_rem = []
colors_sample = []
for i in range(len(rem)):
    if labels[rem[i]] >= 4/3:
        colors_rem.append('g')
    elif labels[rem[i]] >= 2/3:
        colors_rem.append('r')
    else:
        colors_rem.append('b')
for i in range(len(sample)):
    if labels[sample[i]] >= 4/3:
        colors_sample.append('g')
    elif labels[sample[i]] >= 2/3:
        colors_sample.append('r')
    else:
        colors_sample.append('b')

fig0 =  plt.figure(figsize = (10,7))
ax0 = fig0.add_subplot(111, projection='3d')
ax0.scatter3D(data[rem][:,0],data[rem][:,1],data[rem][:,2],s=2,color=colors_rem)
ax0.scatter3D(data[sample][:,0],data[sample][:,1],data[sample][:,2],s=100,color = colors_sample)
ax0.scatter3D(data[sample[out_hull]][:,0],data[sample[out_hull]][:,1],data[sample[out_hull]][:,2],s=100,marker='x')
for i in range(len(sample)):
    ax0.text(data[sample[i]][0],data[sample[i]][1],data[sample[i]][2],str(round(labels[sample[i]],2)))
ax0.set_title('Original data')


#First delaunayization
tri, _, e, err, labels[sample] = delaunayization(data,sample,labels,dim,lb,ub)

colors_rem = []
colors_sample = []
for i in range(len(rem)):
    if labels[rem[i]] >= 4/3:
        colors_rem.append('g')
    elif labels[rem[i]] >= 2/3:
        colors_rem.append('r')
    else:
        colors_rem.append('b')
for i in range(len(sample)):
    if labels[sample[i]] >= 4/3:
        colors_sample.append('g')
    elif labels[sample[i]] >= 2/3:
        colors_sample.append('r')
    else:
        colors_sample.append('b')
fig1 =  plt.figure(figsize = (10,7))
ax1 = fig1.add_subplot(111, projection='3d')
ax1.scatter3D(data[rem][:,0],data[rem][:,1],data[rem][:,2],s=2,color=colors_rem)
ax1.scatter3D(data[sample][:,0],data[sample][:,1],data[sample][:,2],s=100,color = colors_sample)
for i in range(len(sample)):
    ax1.text(data[sample[i]][0],data[sample[i]][1],data[sample[i]][2],str(round(labels[sample[i]],2)))
#plot_3Ddelaunay(data,labels,sample,rem,tri,ax1)
ax1.set_title('First estimation')


#Moving points
start = time()
data, labels, sample, added, tri, e, err = movepoints(data,labels,sample,out_hull,dim,it,al,errw,lb,ub,threshold,filename=filename,bc_time=bc_time,mte_threshold=mte_threshold, test_data=test_data,real=test_labels)
end = time()
print("Total time: ",end-start)

colors = []
for i in range(len(sample)):
    if labels[sample[i]] >= 4/3:
        colors.append('g')
    elif labels[sample[i]]>=2/3:
        colors.append('r')
    else:
        colors.append('b')

fig2 =  plt.figure(figsize = (10,7))
ax2 = fig2.add_subplot(111, projection='3d')
ax2.scatter3D(data[rem][:,0],data[rem][:,1],data[rem][:,2],s=2,color=colors_rem)
ax2.scatter3D(data[sample][:,0],data[sample][:,1],data[sample][:,2],s=100,color = colors)
for i in range(len(sample)):
    ax2.text(data[sample[i]][0],data[sample[i]][1],data[sample[i]][2],str(round(labels[sample[i]],2)))
ax2.set_title('After moving points')
#plot_3Ddelaunay(data,labels,sample,rem,tri,ax2)


#Test data classification
targets, errors, correct, incorrect = classify(test_data, dim, tri, labels[sample], threshold=threshold, real=test_labels)
print(errors)
test_colors = []
for i in range(len(test_labels)):
    if test_labels[i] >= threshold:
        test_colors.append('r')
    else:
        test_colors.append('b')

fig3 =  plt.figure(figsize = (10,7))
ax3 = fig3.add_subplot(111, projection='3d')
ax3.scatter3D(data[sample][:,0],data[sample][:,1],data[sample][:,2],s=10,color = colors,marker='^')
ax3.scatter3D(data[rem][:,0],data[rem][:,1],data[rem][:,2],s=1,color = colors_rem, alpha=0.1)
ax3.scatter3D(test_data[correct][:,0],test_data[correct][:,1],test_data[correct][:,2],s=100,color = [test_colors[i] for i in correct],marker='o')
ax3.scatter3D(test_data[incorrect][:,0],test_data[incorrect][:,1],test_data[incorrect][:,2],s=100,color = [test_colors[i] for i in incorrect],marker='x')
#plot_3Ddelaunay(data,labels,sample,rem,tri,ax3)
ax3.set_title('Labels estimation')
#fig3.savefig('media/'+filename+'.png')


#Show all plots
plt.show()

