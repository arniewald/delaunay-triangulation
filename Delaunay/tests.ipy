# -*- coding: utf-8 -*-
"""
Created on Sat Dec 30 15:12:37 2023

@author: arnau
"""
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.widgets import Slider
from mpl_toolkits.mplot3d import Axes3D
from time import time
import pandas as pd
import random

from sklearn.datasets import make_circles, make_classification

from functions import *
from mc_functions import *

dim = 2
n_samples = 10000
noise = 0.1
size = 75
test_size = 50
al = 0.05 #DO NOT USE 0.5; DIFFERENT POINTS MAY LAND ON THE SAME SPOT!!!
errw = 0.9
it = 100
rep = 0
lb = 0
ub = 1
binary = False
threshold = 0.5
node =41

random.seed(0)
data, labels = make_classification(n_samples=n_samples,n_features=2, n_redundant=0, n_informative=2, n_clusters_per_class=1,n_classes=3,random_state=0)
data = np.array(data, dtype=float)
labels = np.array(labels, dtype=float)

data, labels, test_data, test_labels = sample_to_test(data,labels,test_size)
data, labels, sample, rem, out_hull = initialize_sample(data,labels,size,dim,rep)
labels, dim_labels = reshape_labels(data,labels)


""" datatri0 = tri.simplices.copy()
for i in range(len(datatri0)):
    for j in range(dim+1):
        datatri0[i][j] = sample[datatri0[i][j]]
dftri0 = pd.DataFrame(datatri0,columns=['v1','v2','v3'])
dftri0.to_csv('triangulation_initial.csv') """

#DataFrame schema: x0, y0, z0, Type, Out_hull, dx, dy, x1, y1, z1
""" df0 = pd.DataFrame(data,columns=['x','y','z'])
df0['Type'] = np.where(df0.index.isin(sample),'sample','rem')
df0['Out_hull'] = np.where(df0.Type == 'sample',np.where(df0.index.isin(sample[out_hull]),True, False),False)
df0.to_csv('circles_initial.csv') """

#Initial plot
""" colors_rem = []
colors_sample = []
for i in range(len(rem)):
    if sum(labels[rem[i],:])==0:
        colors_rem.append('b')
    elif list(labels[rem[i],:]).index(1) == 1:
        colors_rem.append('g')
    else:
        colors_rem.append('r')
for i in range(len(sample)):
    if sum(labels[sample[i],:])==0:
        colors_sample.append('b')
    elif list(labels[sample[i],:]).index(1) == 1:
        colors_sample.append('g')
    else:
        colors_sample.append('r')

fig0, ax0 =  plt.subplots(figsize = (10,7))
ax0.scatter(data[rem][:,0],data[rem][:,1],s=2,color=colors_rem)
ax0.scatter(data[sample][:,0],data[sample][:,1],s=100,color = colors_sample)
ax0.scatter(data[sample[out_hull]][:,0],data[sample[out_hull]][:,1],s=100,marker='x')
ax0.set_title('Original data')
for i in range(len(sample)):
    ax0.annotate('('+str(i)+','+str(round(data[sample[i]][dim],2))+')',[data[sample[i]][0],data[sample[i]][1]])

#First delaunayization
tri, _, e, labels[sample,:], err = mc_delaunayization2(data,sample,labels,dim,dim_labels)
colors_sample = [[min(1,labels[sample][i,0]),min(labels[sample][i,1],1),1-min(labels[sample][i,0],1)-min(1,labels[sample][i,1])] for i in range(len(sample))]
colors_sample = [[max(c[0],0),max(c[1],0),max(c[2],0)] for c in colors_sample]

fig1, ax1 =  plt.subplots(figsize = (10,7))
ax1.triplot(data[sample][:,0],data[sample][:,1],'--',tri.simplices,color = "black")
ax1.scatter(data[rem][:,0],data[rem][:,1],s=2,color=colors_rem)
ax1.scatter(data[sample][:,0],data[sample][:,1],s=100,color = colors_sample)
for i in range(len(sample)):
    ax1.annotate('('+str(i)+','+str(round(err[i],2))+')',[data[sample[i]][0],data[sample[i]][1]]) 
ax1.set_title('First estimation')

L = len(out_hull)
adj = adjacency(tri,out_hull)
print(adj)
print(sample)
disin = np.zeros(L)
errin = np.zeros(L)
for i in range(L):
    print('Node ',out_hull[i])
    try:
        errin[i] = sample[adj[out_hull[i]][np.argmax([(err[j]-err[out_hull[i]]) for j in adj[out_hull[i]]])]]
        print('\t Maximum error: ',adj[out_hull[i]][np.argmax([(err[j]-err[out_hull[i]]) for j in adj[out_hull[i]]])])
        disin[i] = sample[adj[out_hull[i]][np.argmax([sum((data[sample[j]]-data[sample[out_hull[i]]])**2) for j in adj[out_hull[i]]])]]
        print('\t Maximum distance: ',adj[out_hull[i]][np.argmax([sum((data[sample[j]]-data[sample[out_hull[i]]])**2) for j in adj[out_hull[i]]])])
    except Exception as e:
        print("Exception at node ",sample[out_hull[i]],": ",adj[out_hull[i]])
        print("Exception: ",e)

errin = [int(i) for i in errin]
disin = [int(i) for i in disin]
dx_e = al*errw*(data[errin]-data[sample[out_hull]])[:,0]
dy_e = al*errw*(data[errin]-data[sample[out_hull]])[:,1]
dx_d = al*(1-errw)*(data[disin]-data[sample[out_hull]])[:,0]
dy_d = al*(1-errw)*(data[disin]-data[sample[out_hull]])[:,1]
for i in range(L):
    print(out_hull[i],'\t',list(sample).index(errin[i]),'\t',data[errin[i]],'\t',data[sample[out_hull[i]]],'\t',data[errin[i]]-data[sample[out_hull[i]]])
    print(dx_e[i], dy_e[i])
ax1.scatter(data[sample[out_hull]][:,0]+dx_e,data[sample[out_hull]][:,1]+dy_e,color='black',s=100,marker='s')
ax1.scatter(data[sample[out_hull]][:,0]+dx_d,data[sample[out_hull]][:,1]+dy_d,color='black',s=100,marker='*') """



""" #DataFrame schema: label, dx, dy
df1 = pd.DataFrame(data_incr,columns=['label','dx','dy'])
df1.label = df1.label.astype(int)
df1.to_csv('increments.csv') """



""" datatri1 = tri.simplices.copy()
for i in range(len(datatri1)):
    for j in range(dim+1):
        datatri1[i][j] = sample[datatri1[i][j]]
dftri1 = pd.DataFrame(datatri1,columns=['v1','v2','v3'])
dftri1.to_csv('triangulation_final.csv') """

""" #DataFrame schema: x1, y1, z1, Type, Out_hull
df2 = pd.DataFrame(data,columns=['x','y','z'])
df2['Type'] = np.where(df2.index.isin(sample),'sample','rem')
df2['Out_hull'] = np.where(df2.Type == 'sample',np.where(df2.index.isin(sample[out_hull]),True, False),False)
df2.to_csv('circles_final.csv') """


#data[sample[out_hull]] += al*(errw*(data[errin]-data[sample[out_hull]])+(1-errw)*(data[disin]-data[sample[out_hull]]))
tri, _, e, labels[sample,:], err = mc_delaunayization2(data,sample,labels,dim,dim_labels)
print(sum(e)/len(e))
#ax1.triplot(data[sample][:,0],data[sample][:,1],tri.simplices,color = "black")
colors_rem = []
for i in range(len(rem)):
    if sum(labels[rem[i],:])==0:
        colors_rem.append('b')
    elif list(labels[rem[i],:]).index(1) == 1:
        colors_rem.append('g')
    else:
        colors_rem.append('r')
colors_sample = [[min(1,labels[sample][i,0]),0,1-min(labels[sample][i,0],1)] for i in range(len(sample))]
colors_sample = [[max(c[0],0),0,max(c[2],0)] for c in colors_sample]
#ax1.scatter(data[sample][:,0],data[sample][:,1],s=100,color = colors_sample,marker='x')
long_data = []
long_colors = []
long_tris = []
long_dxe = []
long_dye = []
long_dxd = []
long_dyd = []
long_errs = []
long_errin = []
long_disin = []
avs, sigmas, maxs, evars, rerrs = [], [], [], [], []
for i in range(it):
    tri, _, e, labels[sample,:], err = mc_delaunayization2(data,sample,labels,dim,dim_labels)
    avs.append(sum(e)/len(data))
    sigmas.append(np.sqrt(sum(e*e)/len(e) - avs[i]*avs[i]))
    maxs.append(max(e))
    evars.append(compute_edges_variance(data,dim,sample,tri))
    rerrs.append(mc_compute_real_error(test_data, dim, tri, labels[sample], test_labels))
    colors_sample = [[min(1,labels[sample][i,0]),0,1-min(labels[sample][i,0],1)] for i in range(len(sample))]
    colors_sample = [[max(c[0],0),0,max(c[2],0)] for c in colors_sample]
    print(i)
    L = len(out_hull)
    adj = adjacency(tri,out_hull)
    disin = np.zeros(L)
    errin = np.zeros(L)
    for i in range(L):
        try:
            errin[i] = sample[adj[out_hull[i]][np.argmax([(err[j]-err[out_hull[i]]) for j in adj[out_hull[i]]])]]
            disin[i] = sample[adj[out_hull[i]][np.argmax([sum((data[sample[j]]-data[sample[out_hull[i]]])**2) for j in adj[out_hull[i]]])]]
        except Exception as e:
            print("Exception at node ",sample[out_hull[i]],": ",adj[out_hull[i]])
            print("Exception: ",e)
    errin = [int(i) for i in errin]
    disin = [int(i) for i in disin]
    long_errin.append(list(sample).index(errin[out_hull.index(node)]))
    long_disin.append(list(sample).index(disin[out_hull.index(node)]))
    dx_e = al*errw*(data[errin]-data[sample[out_hull]])[:,0]
    dy_e = al*errw*(data[errin]-data[sample[out_hull]])[:,1]
    dx_d = al*(1-errw)*(data[disin]-data[sample[out_hull]])[:,0]
    dy_d = al*(1-errw)*(data[disin]-data[sample[out_hull]])[:,1]
    long_dxe.append(dx_e)
    long_dye.append(dy_e)
    long_dxd.append(dx_d)
    long_dyd.append(dy_d)
    long_data.append(data[sample])
    data[sample[out_hull]] += al*(errw*(data[errin]-data[sample[out_hull]])+(1-errw)*(data[disin]-data[sample[out_hull]]))
    long_colors.append(colors_sample)
    long_tris.append(tri)
    long_errs.append(err)

fig, ax =  plt.subplots(1,2,figsize = (10,7))
ax2, ax4 = ax[0], ax[1]
ax[0].scatter(long_data[0][:,0],long_data[0][:,1],color=long_colors[0])
ax[0].scatter(data[rem][:,0],data[rem][:,1],s=2,color=colors_rem, alpha=0.2)
axcolor = "White"
time_axis = plt.axes([0.20, 0.05, 0.65, 0.03], 
                          facecolor = axcolor)
time_slider = Slider(time_axis,'Time',0,it,valinit=0)
def update(val):
    ax2.clear()
    ax4.clear()
    ax2.scatter(long_data[int(val)][:,0],long_data[int(val)][:,1],color=long_colors[int(val)],alpha=0.2)
    ax2.scatter(data[rem][:,0],data[rem][:,1],s=2,color=colors_rem, alpha=0.2)

    ax2.quiver(long_data[int(val)][node,0],long_data[int(val)][node,1],long_dxe[int(val)][out_hull.index(node)],long_dye[int(val)][out_hull.index(node)],angles='xy',color='orange')
    ax2.quiver(long_data[int(val)][node,0],long_data[int(val)][node,1],long_dxd[int(val)][out_hull.index(node)],long_dyd[int(val)][out_hull.index(node)],angles='xy',color='purple')
    ax2.quiver(long_data[int(val)][node,0],long_data[int(val)][node,1],long_dxe[int(val)][out_hull.index(node)]+long_dxd[int(val)][out_hull.index(node)],long_dye[int(val)][out_hull.index(node)]+long_dyd[int(val)][out_hull.index(node)],angles='xy',color='black')
    text = '('+str(round(long_data[int(val)][node,0]+long_dxe[int(val)][out_hull.index(node)]+long_dxd[int(val)][out_hull.index(node)],2))+','+str(round(long_data[int(val)][node,1]+long_dye[int(val)][out_hull.index(node)]+long_dyd[int(val)][out_hull.index(node)],2)) +')'
    ax2.text(long_data[int(val)][node,0]+long_dxe[int(val)][out_hull.index(node)]+long_dxd[int(val)][out_hull.index(node)],long_data[int(val)][node,1]+long_dye[int(val)][out_hull.index(node)]+long_dyd[int(val)][out_hull.index(node)],text)
    
    ax2.scatter(long_data[int(val)][node,0],long_data[int(val)][node,1],color=long_colors[int(val)][node],s=100)#[long_colors[int(val)][j] for j in out_hull],marker='x')
    ax2.scatter(long_data[int(val)+1][node,0],long_data[int(val)+1][node,1],color=long_colors[int(val)+1][node],s=100,marker='*')
    ax2.scatter(long_data[int(val)][node,0]+long_dxe[int(val)][out_hull.index(node)]+long_dxd[int(val)][out_hull.index(node)],long_data[int(val)][node,1]+long_dye[int(val)][out_hull.index(node)]+long_dyd[int(val)][out_hull.index(node)],color=long_colors[int(val)][node],s=100,marker='x')#[long_colors[int(val)][j] for j in out_hull],marker='x')
    ax2.scatter([long_data[int(val)][long_errin[int(val)],0]],[long_data[int(val)][long_errin[int(val)],1]],color='orange',marker='s',s=100,zorder=0)
    ax2.scatter([long_data[int(val)][long_disin[int(val)],0]],[long_data[int(val)][long_disin[int(val)],1]],color='purple',marker='s',s=100,zorder=0)

    
    
    #ax2.plot(range(int(val)),avs[:int(val)],'--+')
    tri = long_tris[int(val)]
    for triangle in range(len(tri.simplices)):
        tr = tri.simplices[triangle]
        if node in tr:
            color = 'black'
            lw = '0.5'
            pts = long_data[int(val)][tr]
            """ 
            ax1.plot3D(pts[[0,1],0], pts[[0,1],1], pts[[0,1],2], color=color, lw=lw, alpha = 0.1)
            ax1.plot3D(pts[[0,2],0], pts[[0,2],1], pts[[0,2],2], color=color, lw=lw, alpha = 0.1)
            ax1.plot3D(pts[[0,3],0], pts[[0,3],1], pts[[0,3],2], color=color, lw=lw, alpha = 0.1)
            ax1.plot3D(pts[[1,2],0], pts[[1,2],1], pts[[1,2],2], color=color, lw=lw, alpha = 0.1)
            ax1.plot3D(pts[[1,3],0], pts[[1,3],1], pts[[1,3],2], color=color, lw=lw, alpha = 0.1)
            ax1.plot3D(pts[[2,3],0], pts[[2,3],1], pts[[2,3],2], color=color, lw=lw, alpha = 0.1) """

            ax2.plot(pts[[0,1],0], pts[[0,1],1], color=color, lw=lw, alpha = 0.1)
            ax2.plot(pts[[0,2],0], pts[[0,2],1], color=color, lw=lw, alpha = 0.1)
            ax2.plot(pts[[1,2],0], pts[[1,2],1], color=color, lw=lw, alpha = 0.1)

            for i in tr:
                if i==node:
                    text = str(round(long_errs[int(val)][i],2))+',('+str(round(long_data[int(val)][i][0],2))+','+str(round(long_data[int(val)][i][1],2))+')'
                    ax2.text(long_data[int(val)][i][0],long_data[int(val)][i][1],text)
                else:
                    text = '('+str(round(long_errs[int(val)][i],2))+')'
                    ax2.text(long_data[int(val)][i][0],long_data[int(val)][i][1],text)
    
    ax4.plot(range(int(val)+1),avs[:int(val)+1],'--+')
time_slider.on_changed(update)
plt.show()