# -*- coding: utf-8 -*-
"""
Applies the algorithm to Iris dataset from sklearn, removing one dimension.
"""

import numpy as np
import matplotlib.pyplot as plt
from time import time

from sklearn.datasets import load_iris

from functions import *
from mc_functions import *


#Variables
dim = 3                 #Dimension of data
size = 50               #Original size of Delaunay triangulation
test_size = 20          #Size of subdata to test
al = 0.1                #Factor of distance gradient
errw = 0                #Weight of error gradient. Distance gradient's weight is 1-errw
it = 100                #Number of iterations
rep = 0                 #NÂº of times to refine convex hull
threshold = 0.5         #Threshold at which we map the label to 1
bc_time = 10            #Times at which we add barycenters
mte_threshold = 0.2     #Threshold of mean training error of triangles at which we add the barycenters
ref_label = None        #Label with respect to which binarize 
random.seed(0)


#Dataset extraction, test sampling and data initialization
iris = load_iris(as_frame=True)['frame'] #We discard cepal width
iris = iris[['sepal length (cm)','petal length (cm)', 'petal width (cm)','target']] #There is repeated data since we are removing a feature, so we remove duplicates
iris.drop_duplicates(inplace=True)
data = iris[['sepal length (cm)','petal length (cm)', 'petal width (cm)']].to_numpy()
data = np.array(data, dtype=float)
labels = iris['target'].to_numpy()
labels = np.array(labels, dtype=float)

binary = ''
if ref_label!=None:
    binary = '_binary'+str(ref_label)
    for i in range(len(labels)):
        if labels[i] == ref_label:
            labels[i] = 1
        else:
            labels[i] = 0
#Name of file in which to write results
filename = '_Iris3D_mc' + binary + '_bctime' + str(bc_time) + '_th' + str(mte_threshold)

data, labels, test_data, test_labels = sample_to_test(data,labels,test_size)
data, labels, sample, rem, out_hull = initialize_sample(data,labels,size,dim,rep)
labels, dim_labels = reshape_labels(data,labels)


#Initial plot
colors_rem = []
colors_sample = []
if ref_label!=None:
    for i in range(len(rem)):
        if labels[rem[i],:]==0:
            colors_rem.append('r')
        else:
            colors_rem.append('b')
    for i in range(len(sample)):
        if labels[sample[i],:]==0:
            colors_sample.append('r')
        else:
            colors_sample.append('b')
else:
    for i in range(len(rem)):
        if sum(labels[rem[i],:])==0:
            colors_rem.append('b')
        elif list(labels[rem[i],:]).index(1) == 1:
            colors_rem.append('g')
        else:
            colors_rem.append('r')
    for i in range(len(sample)):
        if sum(labels[sample[i],:])==0:
            colors_sample.append('b')
        elif list(labels[sample[i],:]).index(1) == 1:
            colors_sample.append('g')
        else:
            colors_sample.append('r')

fig0 =  plt.figure(figsize = (10,7))
ax0 = fig0.add_subplot(111, projection='3d')
ax0.scatter3D(data[rem][:,0],data[rem][:,1],data[rem][:,2],s=2,color=colors_rem)
ax0.scatter3D(data[sample][:,0],data[sample][:,1],data[sample][:,2],s=100,color = colors_sample)
ax0.scatter3D(data[sample[out_hull]][:,0],data[sample[out_hull]][:,1],data[sample[out_hull]][:,2],s=100,marker='x')
ax0.set_title('Original data')


#First delaunayization
tri, _, e, labels[sample,:] = mc_delaunayization(data,sample,labels,dim,dim_labels)

if ref_label!=None:
    colors_sample = [[1-min(1,labels[sample][i,0]),0,min(labels[sample][i,0],1)] for i in range(len(sample))]
else:
    colors_sample = [[min(1,labels[sample][i,0]),min(labels[sample][i,1],1),1-min(labels[sample][i,0],1)-min(1,labels[sample][i,1])] for i in range(len(sample))]
colors_sample = [[max(c[0],0),max(c[1],0),max(c[2],0)] for c in colors_sample]

fig1 =  plt.figure(figsize = (10,7))
ax1 = fig1.add_subplot(111, projection='3d')
ax1.scatter3D(data[rem][:,0],data[rem][:,1],data[rem][:,2],s=2,color=colors_rem)
ax1.scatter3D(data[sample][:,0],data[sample][:,1],data[sample][:,2],s=100,color = colors_sample)
#plot_3Ddelaunay(data,labels,sample,rem,tri,ax1)
ax1.set_title('First estimation')


#Moving points
start = time()
data, labels, sample, added, tri, e = mc_movepoints(data,labels,sample,out_hull,dim,dim_labels,it,al,bc_time,mte_threshold,filename=filename, test_data=test_data,real=test_labels)
end = time()
print("Total time: ",end-start)

if ref_label!=None:
    colors = [[1-min(1,labels[sample][i,0]),0,min(labels[sample][i,0],1)] for i in range(len(sample))]
else:
    colors = [[min(1,labels[sample][i,0]),min(labels[sample][i,1],1),1-min(labels[sample][i,0],1)-min(1,labels[sample][i,1])] for i in range(len(sample))]
colors = [[max(c[0],0),max(c[1],0),max(c[2],0)] for c in colors]

fig2 =  plt.figure(figsize = (10,7))
ax2 = fig2.add_subplot(111, projection='3d')
ax2.scatter3D(data[rem][:,0],data[rem][:,1],data[rem][:,2],s=2,color=colors_rem)
ax2.scatter3D(data[sample][:,0],data[sample][:,1],data[sample][:,2],s=100,color = colors)
ax2.set_title('After moving points')
#plot_3Ddelaunay(data,labels,sample,rem,tri,ax2)


#Test data classification
targets, errors, correct, incorrect = mc_classify(test_data, dim, tri, labels[sample,:], real=test_labels)
print(errors)
test_colors = []
if ref_label!=None:
    for i in range(len(test_labels)):
        if test_labels[i]==1:
            test_colors.append('r')
        else:
            test_colors.append('b')
else:
    for i in range(len(test_labels)):
        if test_labels[i]==0:
            test_colors.append('r')
        elif test_labels[i] == 1:
            test_colors.append('g')
        else:
            test_colors.append('b')

fig3 =  plt.figure(figsize = (10,7))
ax3 = fig3.add_subplot(111, projection='3d')
ax3.scatter3D(data[sample][:,0],data[sample][:,1],data[sample][:,2],s=10,color = colors,marker='^')
ax3.scatter3D(data[rem][:,0],data[rem][:,1],data[rem][:,2],s=1,color = colors_rem, alpha=0.1)
ax3.scatter3D(test_data[correct][:,0],test_data[correct][:,1],test_data[correct][:,2],s=100,color = [test_colors[i] for i in correct],marker='o')
ax3.scatter3D(test_data[incorrect][:,0],test_data[incorrect][:,1],test_data[incorrect][:,2],s=100,color = [test_colors[i] for i in incorrect],marker='x')
#plot_3Ddelaunay(data,labels,sample,rem,tri,ax3)
ax3.set_title('Labels estimation')
#fig3.savefig('media/'+filename+'.png')


#Show all plots
plt.show()

